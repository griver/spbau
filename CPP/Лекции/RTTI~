Приведение типов и RTTI
(Run Time Type Information)

с - style cast
что происходит??

приведение встроенных типов 

в с++ появились: 
 1 конструкторы 
 2 OOP
 3 Операторы приведения
 4 Константность

и виды приведения:
    static_cast
    const_cast
    reinterpret_cast
    dynamic_cast

    c-style cast включает в себя прервые 3
    

A) static_cast:
    float d 1.7
    int i = (int)d; , int(d)
    Но в стиле c++ правилнее писать так: 
    static_cast<int>(d)
    Что умеет делать static_cast:
        встроенные типы
        пользовательские преобразования / OOP
        преобразования указателей и ссылок  связанных классов 
            восходящие и несходящие преобразования
        преобразование к void         

B) const_cast:
    убрать или добавить константу
    A const a;
    A& m = const_cast<A&>(a);
    //undefined behavior и вобще убирать константу только у тех данных которые изначально не были константными!
    // ну логично нельзя писать в блок кода который рид-онли  
    const_cast это очень плохой тон есть несколько случаев но к черту всегда лучше его избегать
    // смаль считает что  лучше не использовать: const_cast, Почти всегда reinterpret_cast и delete
    
    когда нужно реализовать два метода константный и  не константный и в них один код и мы хотим избежать копирования кода то:
    предалагается реализовать не конст метод через конст. в обрватную сторону это обман. логично же
    T const & get(int i) const {
    }

    T& get(int i) {
        return 
    const_cast<T&> (
    const_cast<A const &>(*this).get(i));   // мы добавили конст для класса он вызвал свой константный метод и вернул 
                                            // конст ссылку мы убрали конст со ссылки
    
    }    
     только что приведен чуть ли не единственный пример допустимого использования константного каста

C) reinterpret_cast:

    Приведение одного типа к другому
    A*  К B* и наоборот



-------
s-style cast может применить любой из кастов или даже комбинацию этих кастов.
????Пример когда c-style cast работает не совсем корректно

Отступление: оптимизация времени компиляции
    есть header включенный в весть гиганский проэкт 
    если его изменить придется скомпилить дофига всего.
    тогда делают так если у нас есть указатель на некоторый Settings который используется везде в header'aх мы используем просто декларации структуры: 
    struct Settings;
    А вот в cpp шниках уже будет подключение <Settings.h> 
    тобишь зачастую нужно сказать компилятору что это вообще некоторая структура а реально о ней знать только там где будут вызываться её методы   


так что-то там про касты между классами: 
    struct A;
    struct B;
    struct C; 
    если было так и A и B наследники C 
    и A Приводился в коде к С тогда с-style приведение сделает reinterpret_cast и не сдвинет указатель в
    сущности типа А на C  и будет проблема.


Теперь о RTTI 
#include <typeinfo>

type_info t = typeid(a);
добавление спец информации к типам нужно включать ручками иногда и даже эксепшены

//----------------------------------------------------------
[https://twitter.com/#!/search/%23AUDevDays #AUDevDays]

==Команды==
* Акселерометр в Android : Мария Фофанова, Алина Певзнер 
* Cheque_recognizer: Дмитрий Шерставин, Залим Башоров, Семен Мартынов
* Оповещения с Android: Михаил Кринкин, Алексей Коровин, Александр Опейкин, Сергей Лазарев 
* Geo Tracker: Евгений Краско, Алексей Кудинкин, Анна Ждан, Сорокин Артём, Ярослав Лепенькин 
* DJVU_Formatter: Василий Кононенко, Дмитрий Бандурин 

==Описание Проектов==
* [[DJVU_Formatter|DJVU форматер под маленькие разрешения экрана]]
* [[Cheque_recognizer|Chèque recognizer]]
* [[Акселерометр в Android|Акселерометр в Android]]

//----------------------------------------------------------


D) dynamic_cast<B&>(

