И тема пятой лекции адаптеры!


stack

queue

priority_queue

они не реализованны но хотелось бы их иметь. такие дела!


stack<T, std::vector<T> >
queue<T, std::deque<T> > 
priority_queue<T, std::vector<T>, cmp > 

предыдущие структуры реализовавнны в файле queue
Но это не контейнеры просто измененный интерфейс

еще есть bitset
 для работы с маской
это не кgit add . -A онтейнер это обертка над маской

bitset<24> b;
bit.чтото как то


Что-то какой то цикл как пробежать все элементы используя указатели: 

первый forFunc(int * p, int size);
второй forFunc(int * p, int* q); //указатель на первый и на место за последним элементом
второй предпочтительней. аргументы однотипны и тупо так реалоизовывать немного быстрее. ну обращении к элементу например *p Против p[100] Но это смешно. единообразоность круче



ИТЕРАТОРЫ
виды итераторов: 
1)Random Access Iterators
    контейнеры: vector, deque
    эквиваленты указателям
    ++, --, i+10, j - i это за O(1)
2) Bidirectional iterators
    операторы: i++, i--
    контейнеры list
    ходят в обе стороны в общем
3) Forward iterators
    operator ++
3.1) Input имеет доступ на read
3.2) Output имеет доступ на write

это разделение используется для указания требований к алгоритмам
например сорт
template<class RAIt>
void sort(RAIt p, RAIt q)
//собственно нужен рандом акцесс итератор. не факт но допустим


..какой-то промежуток который я не слушал. но там просто примеры вроде были



еще пример: 
Template<class FwdIt >
(КАКОВО БУДЕТ ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ?) getThird(FwdIt p, FwdIt q, int n) {
    while ( (n--) > 0) {
        ++p    
    }
    return *p;
}
1) вариант вернуть указатель но это ограничивает виды итераторов сразу это плохо
 
ОТВЕТ: 
оператор некторый класс внутри которого хранится тип хранимого класса  
typedef template<class T>
Struct MyIt {
    typedef T value_type;
}
поэтому возращаемое значение может быть: 
typename FwdIt::value_type

но есть моменты это не работает с указателями в которых нет такого тайпдефа))
поэтому используется другой подход: 

используется класс iterator_traids
он содержит данные о итераторе:

iterator_traids <FwdIt>::value_type 
с указетелями это тоже прокатит засчет частичной специализации шаблона для указателей.
еще есть у него есть:
iterator_traids <FwdIt>::iterator_category
iterator_traids <FwdIt>::difference_category это тип возращаемого значения i - j
iterator_traids <FwdIt>::pointer
iterator_traids <FwdIt>::reference


Так тут был вопрос про то как определять категории:???

и пример-ответ к этомому вопросу:
void rotate(It p, It q) {
    rotate_impl(p,q, iterator_traids<It>::iterator_category())
в начале пишут функцию а потом реализацию для каждого итератора который желают поддерживать
и третим параметром принимается random_access_iterator_tag) 
Тобишь структура которая возращается. категорией. она пустая просто указывает тип шаблона

Три способа: 
1)Определить тайпдефы 
2)специализировать итератор трэйдс
3) унаследовать от std::iterator 
правильный подход для написания своего итератора это 3


небольшой обзор какие бывают полезные дополнительные итераторы

каждый контейнер имеет два тайпдефа
iterator
const_iterator - нельзя менять обьект

reverse_iterator
const_reverse_iterator 
reverse_iterator<BiDi> это шаблонный итератор который по любому итераитору возращает такой же кторый бегает в боратную сторону

тонкости с реверс итераторами
с помощью реверс итератора добежал до 6 после нее стояла 7
захотел удалить. обратил итератор вызвал удаление с обращенным итератором
удалил 7ку.
тк он возращает указатель на промежуток с другой стороны от элемента


Есть еще спеиальные итераторы: 
istream_iterator<double>() если скобка пуста то будет читать до конца
ostream_iterator<int>(cout) 


еще более полезные итераторы:
хочу вернуть из функции элементы сразу добавить их во внешний массив(?а может и не так)

идея был массив дополняю его пустыми значениями и передаю итератор его под видом аутпут итератор но будет работать только в том случае если я знаю как минимум верхнюю оценку на количестово элементов в итераторе

НО это не очень правильно
Есть адаптеры для подобного запихивания
есть back_inserter, front_inserter, inserter(принимающий итератор указывающий на позицию куда вставить)
все это аутпут итераторы
    

