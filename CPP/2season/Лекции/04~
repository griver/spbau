# Продолжение контейнеров 

vector<bool>

Вот это: bool *p = &v[0] не сработает

v[i] = true мы хотим что бы это работало хотим чтобы v[i] было lvalue
но так мы не можем сделатть так: 
bool & operator[](int i) 
мы возвращаем прокси обьект: 
proxyobj operator[](int)
он хранит в себе индекс и указатлеь на массив
у него определны два оператора 
bool() - приведение к bool 
operator=(bool) -присваивание bool

vector<bool> -оптимизация памяти, ухудшение времени работы ну чего и следовало ожидать

права работают на уровне разрешения имен


если будет так: 
template< >
vector<bool> {
private:
    struct proxy;
}


То что он в привате значит что  не могу написать:
vector<bool>::proxy 


Ассоциативные контейнеры!!!!! 
приступим!


set, multiset : <set>
map, multimap : <map>


Принцип begin Первый а end следующий за последним позваляет задавать пустую последовательность: begin == end

set  метод insert возращает два значения iterator и булевое значение был ли добавлен элемент в set
обычно в set исплоьзуется красно-черное дерево но в стандарте не определено.

Есть небольшая неприятность с удалением 
 
 


